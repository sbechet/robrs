// Monty on the Run - Rob Hubbard - 1985 Gremlin Graphics

use crate::rhplayer::rhsongs::{InstrFx, Instrument, RhSongs, SidT, SoundFx};
#[allow(dead_code)]
pub static RHSONGS: RhSongs = RhSongs {
    version: 10,
    total: 19,
    channels: &CHANNELS,
    tracks: &TRACKS,
    instruments: &INSTRUMENTS,
    soundfx: &SOUNDFX,
    instrfx: &INSTRFX,
    resetspd: 1,
    skydive_v1_when: 0,
    skydive_v1_add: -256,
};

#[allow(dead_code)]
pub static CHANNEL_0: [u8; 65] = [
    17, 20, 23, 26, 0, 39, 0, 40, 3, 5, 0, 39, 0, 40, 3, 5, 7, 58, 20, 23, 0, 39, 0, 40, 47, 48,
    49, 49, 50, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 54, 18, 55, 56, 9,
    42, 9, 43, 9, 10, 9, 42, 9, 43, 9, 10, 13, 13, 15, 255,
];

#[allow(dead_code)]
pub static CHANNEL_1: [u8; 76] = [
    18, 21, 24, 27, 45, 57, 57, 57, 57, 57, 57, 44, 57, 57, 57, 57, 57, 57, 44, 57, 57, 57, 1, 1,
    41, 41, 44, 21, 24, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
    57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 1, 1, 1, 41, 57, 57, 57, 1, 1, 1, 41, 57, 57,
    57, 57, 255,
];

#[allow(dead_code)]
pub static CHANNEL_2: [u8; 132] = [
    19, 22, 25, 28, 2, 2, 29, 30, 2, 2, 29, 31, 4, 4, 32, 32, 6, 2, 2, 29, 30, 2, 2, 29, 31, 4, 4,
    32, 32, 6, 8, 8, 8, 8, 33, 33, 33, 33, 34, 34, 34, 35, 34, 36, 37, 59, 38, 38, 38, 38, 38, 38,
    38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 2, 2, 29, 30, 2, 2, 29, 31, 47, 47, 47, 47, 47, 47, 47,
    47, 47, 47, 47, 47, 47, 11, 11, 29, 29, 11, 11, 29, 11, 11, 11, 12, 12, 29, 29, 29, 16, 11, 11,
    29, 29, 11, 11, 29, 11, 11, 11, 12, 12, 29, 29, 29, 16, 11, 29, 11, 29, 11, 29, 11, 29, 11, 12,
    29, 11, 12, 35, 11, 11, 255,
];

#[allow(dead_code)]
pub static CHANNEL_3: [u8; 7] = [60, 60, 60, 60, 62, 46, 254];

#[allow(dead_code)]
pub static CHANNEL_4: [u8; 5] = [11, 11, 64, 46, 254];

#[allow(dead_code)]
pub static CHANNEL_5: [u8; 7] = [61, 61, 61, 61, 63, 46, 254];

#[allow(dead_code)]
pub static CHANNEL_6: [u8; 45] = [
    70, 71, 72, 70, 71, 72, 73, 73, 73, 73, 73, 73, 73, 73, 75, 75, 75, 75, 75, 75, 76, 74, 74, 74,
    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 76, 255,
];

#[allow(dead_code)]
pub static CHANNEL_7: [u8; 2] = [65, 255];

#[allow(dead_code)]
pub static CHANNEL_8: [u8; 9] = [66, 66, 67, 67, 68, 68, 69, 69, 255];

#[allow(dead_code)]
pub static CHANNELS: [&[&[u8]; 3]; 3] = [
    &[&CHANNEL_0, &CHANNEL_1, &CHANNEL_2],
    &[&CHANNEL_3, &CHANNEL_4, &CHANNEL_5],
    &[&CHANNEL_6, &CHANNEL_7, &CHANNEL_8],
];

#[allow(dead_code)]
pub static TRACKS: [&[u8]; 77] = [
    &TRACK_0, &TRACK_1, &TRACK_2, &TRACK_3, &TRACK_4, &TRACK_5, &TRACK_6, &TRACK_7, &TRACK_8,
    &TRACK_9, &TRACK_10, &TRACK_11, &TRACK_12, &TRACK_13, &TRACK_14, &TRACK_15, &TRACK_16,
    &TRACK_17, &TRACK_18, &TRACK_19, &TRACK_20, &TRACK_21, &TRACK_22, &TRACK_23, &TRACK_24,
    &TRACK_25, &TRACK_26, &TRACK_27, &TRACK_28, &TRACK_29, &TRACK_30, &TRACK_31, &TRACK_32,
    &TRACK_33, &TRACK_34, &TRACK_35, &TRACK_36, &TRACK_37, &TRACK_38, &TRACK_39, &TRACK_40,
    &TRACK_41, &TRACK_42, &TRACK_43, &TRACK_44, &TRACK_45, &TRACK_46, &TRACK_47, &TRACK_48,
    &TRACK_49, &TRACK_50, &TRACK_51, &TRACK_52, &TRACK_53, &TRACK_54, &TRACK_55, &TRACK_56,
    &TRACK_57, &TRACK_58, &TRACK_59, &TRACK_60, &TRACK_61, &TRACK_62, &TRACK_63, &TRACK_64,
    &TRACK_65, &TRACK_66, &TRACK_67, &TRACK_68, &TRACK_69, &TRACK_70, &TRACK_71, &TRACK_72,
    &TRACK_73, &TRACK_74, &TRACK_75, &TRACK_76,
];
#[allow(dead_code)]
pub static TRACK_0: [u8; 58] = [
    0x83, 0x0, 0x37, 0x1, 0x3E, 0x1, 0x3E, 0x3, 0x3D, 0x3, 0x3E, 0x3, 0x43, 0x3, 0x3E, 0x3, 0x3D,
    0x3, 0x3E, 0x3, 0x37, 0x1, 0x3E, 0x1, 0x3E, 0x3, 0x3D, 0x3, 0x3E, 0x3, 0x43, 0x3, 0x42, 0x3,
    0x43, 0x3, 0x45, 0x3, 0x46, 0x1, 0x48, 0x1, 0x46, 0x3, 0x45, 0x3, 0x43, 0x3, 0x4B, 0x1, 0x4D,
    0x1, 0x4B, 0x3, 0x4A, 0x3, 0x48, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_1: [u8; 21] = [
    0x83, 0x1, 0x43, 0x1, 0x4F, 0x1, 0x5B, 0x87, 0x3, 0x2F, 0x83, 0x1, 0x43, 0x1, 0x4F, 0x1, 0x5B,
    0x87, 0x3, 0x2F, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_2: [u8; 18] = [
    0x83, 0x2, 0x13, 0x3, 0x13, 0x3, 0x1F, 0x3, 0x1F, 0x3, 0x13, 0x3, 0x13, 0x3, 0x1F, 0x3, 0x1F,
    0xFF,
];
#[allow(dead_code)]
pub static TRACK_3: [u8; 82] = [
    0xBF, 0x6, 0x48, 0x7, 0x48, 0x1, 0x4B, 0x1, 0x4A, 0x1, 0x4B, 0x1, 0x4A, 0x3, 0x4B, 0x3, 0x4D,
    0x3, 0x4B, 0x3, 0x4A, 0x3F, 0x48, 0x7, 0x48, 0x1, 0x4B, 0x1, 0x4A, 0x1, 0x4B, 0x1, 0x4A, 0x3,
    0x4B, 0x3, 0x4D, 0x3, 0x4B, 0x3, 0x48, 0x3F, 0x4C, 0x7, 0x4C, 0x1, 0x4F, 0x1, 0x4E, 0x1, 0x4F,
    0x1, 0x4E, 0x3, 0x4F, 0x3, 0x51, 0x3, 0x4F, 0x3, 0x4E, 0x3F, 0x4C, 0x7, 0x4C, 0x1, 0x4F, 0x1,
    0x4E, 0x1, 0x4F, 0x1, 0x4E, 0x3, 0x4F, 0x3, 0x51, 0x3, 0x4F, 0x3, 0x4C, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_4: [u8; 33] = [
    0x3, 0x18, 0x3, 0x18, 0x3, 0x24, 0x3, 0x24, 0x3, 0x18, 0x3, 0x18, 0x3, 0x24, 0x3, 0x24, 0x3,
    0x20, 0x3, 0x20, 0x3, 0x2C, 0x3, 0x2C, 0x3, 0x20, 0x3, 0x20, 0x3, 0x2C, 0x3, 0x2C, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_5: [u8; 143] = [
    0x83, 0x4, 0x26, 0x3, 0x29, 0x3, 0x28, 0x3, 0x29, 0x3, 0x26, 0x3, 0x35, 0x3, 0x34, 0x3, 0x32,
    0x3, 0x2D, 0x3, 0x30, 0x3, 0x2F, 0x3, 0x30, 0x3, 0x2D, 0x3, 0x3C, 0x3, 0x3B, 0x3, 0x39, 0x3,
    0x30, 0x3, 0x33, 0x3, 0x32, 0x3, 0x33, 0x3, 0x30, 0x3, 0x3F, 0x3, 0x3E, 0x3, 0x3C, 0x3, 0x46,
    0x3, 0x45, 0x3, 0x43, 0x3, 0x3A, 0x3, 0x39, 0x3, 0x37, 0x3, 0x2E, 0x3, 0x2D, 0x3, 0x26, 0x3,
    0x29, 0x3, 0x28, 0x3, 0x29, 0x3, 0x26, 0x3, 0x35, 0x3, 0x34, 0x3, 0x32, 0x3, 0x2D, 0x3, 0x30,
    0x3, 0x2F, 0x3, 0x30, 0x3, 0x2D, 0x3, 0x3C, 0x3, 0x3B, 0x3, 0x39, 0x3, 0x30, 0x3, 0x33, 0x3,
    0x32, 0x3, 0x33, 0x3, 0x30, 0x3, 0x3F, 0x3, 0x3E, 0x3, 0x3C, 0x3, 0x34, 0x3, 0x37, 0x3, 0x36,
    0x3, 0x37, 0x3, 0x34, 0x3, 0x37, 0x3, 0x3A, 0x3, 0x3D, 0x3, 0x3E, 0x7, 0x3E, 0x7, 0x3F, 0x7,
    0x3E, 0x3, 0x3C, 0x7, 0x3E, 0x57, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_6: [u8; 143] = [
    0x3, 0x1A, 0x3, 0x1A, 0x3, 0x26, 0x3, 0x26, 0x3, 0x1A, 0x3, 0x1A, 0x3, 0x26, 0x3, 0x26, 0x3,
    0x15, 0x3, 0x15, 0x3, 0x21, 0x3, 0x21, 0x3, 0x15, 0x3, 0x15, 0x3, 0x21, 0x3, 0x21, 0x3, 0x18,
    0x3, 0x18, 0x3, 0x24, 0x3, 0x24, 0x3, 0x18, 0x3, 0x18, 0x3, 0x24, 0x3, 0x24, 0x3, 0x1F, 0x3,
    0x1F, 0x3, 0x2B, 0x3, 0x2B, 0x3, 0x1F, 0x3, 0x1F, 0x3, 0x2B, 0x3, 0x2B, 0x3, 0x1A, 0x3, 0x1A,
    0x3, 0x26, 0x3, 0x26, 0x3, 0x1A, 0x3, 0x1A, 0x3, 0x26, 0x3, 0x26, 0x3, 0x15, 0x3, 0x15, 0x3,
    0x21, 0x3, 0x21, 0x3, 0x15, 0x3, 0x15, 0x3, 0x21, 0x3, 0x21, 0x3, 0x18, 0x3, 0x18, 0x3, 0x24,
    0x3, 0x24, 0x3, 0x18, 0x3, 0x18, 0x3, 0x24, 0x3, 0x24, 0x3, 0x1C, 0x3, 0x1C, 0x3, 0x28, 0x3,
    0x28, 0x3, 0x1C, 0x3, 0x1C, 0x3, 0x28, 0x3, 0x28, 0x83, 0x4, 0x36, 0x7, 0x36, 0x7, 0x37, 0x7,
    0x36, 0x3, 0x33, 0x7, 0x32, 0x57, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_7: [u8; 204] = [
    0x8B, 0x0, 0x3A, 0x1, 0x3A, 0x1, 0x3C, 0x3, 0x3D, 0x3, 0x3F, 0x3, 0x3D, 0x3, 0x3C, 0xB, 0x3A,
    0x3, 0x39, 0x7, 0x3A, 0x81, 0x6, 0x4B, 0x1, 0x4D, 0x1, 0x4E, 0x1, 0x4D, 0x1, 0x4E, 0x1, 0x4D,
    0x5, 0x4B, 0x81, 0x0, 0x3A, 0x1, 0x3C, 0x1, 0x3D, 0x3, 0x3F, 0x3, 0x3D, 0x3, 0x3C, 0x3, 0x3A,
    0x3, 0x39, 0x1B, 0x3A, 0xB, 0x3B, 0x1, 0x3B, 0x1, 0x3D, 0x3, 0x3E, 0x3, 0x40, 0x3, 0x3E, 0x3,
    0x3D, 0xB, 0x3B, 0x3, 0x3A, 0x7, 0x3B, 0x81, 0x6, 0x4C, 0x1, 0x4E, 0x1, 0x4F, 0x1, 0x4E, 0x1,
    0x4F, 0x1, 0x4E, 0x5, 0x4C, 0x81, 0x0, 0x3B, 0x1, 0x3D, 0x1, 0x3E, 0x3, 0x40, 0x3, 0x3E, 0x3,
    0x3D, 0x3, 0x3B, 0x3, 0x3A, 0x1B, 0x3B, 0x8B, 0x5, 0x35, 0x3, 0x33, 0x7, 0x32, 0x3, 0x30, 0x3,
    0x2F, 0xB, 0x30, 0x3, 0x32, 0xF, 0x30, 0xB, 0x35, 0x3, 0x33, 0x7, 0x32, 0x3, 0x30, 0x3, 0x2F,
    0x1F, 0x30, 0x8B, 0x0, 0x3C, 0x1, 0x3C, 0x1, 0x3E, 0x3, 0x3F, 0x3, 0x41, 0x3, 0x3F, 0x3, 0x3E,
    0xB, 0x3D, 0x1, 0x3D, 0x1, 0x3F, 0x3, 0x40, 0x3, 0x42, 0x3, 0x40, 0x3, 0x3F, 0x3, 0x3E, 0x1,
    0x3E, 0x1, 0x40, 0x3, 0x41, 0x3, 0x40, 0x3, 0x3E, 0x3, 0x3D, 0x3, 0x3E, 0x3, 0x3C, 0x3, 0x3A,
    0x1, 0x3A, 0x1, 0x3C, 0x3, 0x3D, 0x3, 0x3C, 0x3, 0x3A, 0x3, 0x39, 0x3, 0x3A, 0x3, 0x3C, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_8: [u8; 18] = [
    0x83, 0x2, 0x1B, 0x3, 0x1B, 0x3, 0x27, 0x3, 0x27, 0x3, 0x1B, 0x3, 0x1B, 0x3, 0x27, 0x3, 0x27,
    0xFF,
];
#[allow(dead_code)]
pub static TRACK_9: [u8; 38] = [
    0x83, 0x0, 0x32, 0x1, 0x35, 0x1, 0x34, 0x3, 0x32, 0x3, 0x35, 0x3, 0x34, 0x3, 0x32, 0x3, 0x35,
    0x1, 0x34, 0x1, 0x32, 0x3, 0x32, 0x3, 0x3A, 0x3, 0x39, 0x3, 0x3A, 0x3, 0x32, 0x3, 0x3A, 0x3,
    0x39, 0x3, 0x3A, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_10: [u8; 129] = [
    0x3, 0x37, 0x1, 0x3A, 0x1, 0x39, 0x3, 0x37, 0x3, 0x3A, 0x3, 0x39, 0x3, 0x37, 0x3, 0x3A, 0x1,
    0x39, 0x1, 0x37, 0x3, 0x37, 0x3, 0x3E, 0x3, 0x3D, 0x3, 0x3E, 0x3, 0x37, 0x3, 0x3E, 0x3, 0x3D,
    0x3, 0x3E, 0x3, 0x3D, 0x1, 0x40, 0x1, 0x3E, 0x3, 0x3D, 0x3, 0x40, 0x1, 0x3E, 0x1, 0x3D, 0x3,
    0x40, 0x3, 0x3E, 0x3, 0x40, 0x3, 0x40, 0x1, 0x43, 0x1, 0x41, 0x3, 0x40, 0x3, 0x43, 0x1, 0x41,
    0x1, 0x40, 0x3, 0x43, 0x3, 0x41, 0x3, 0x43, 0x3, 0x43, 0x1, 0x46, 0x1, 0x45, 0x3, 0x43, 0x3,
    0x46, 0x1, 0x45, 0x1, 0x43, 0x3, 0x46, 0x3, 0x45, 0x3, 0x43, 0x1, 0x48, 0x1, 0x49, 0x1, 0x48,
    0x1, 0x46, 0x1, 0x45, 0x1, 0x46, 0x1, 0x45, 0x1, 0x43, 0x1, 0x41, 0x1, 0x43, 0x1, 0x41, 0x1,
    0x40, 0x1, 0x3D, 0x1, 0x39, 0x1, 0x3B, 0x1, 0x3D, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_11: [u8; 18] = [
    0x83, 0x2, 0x1A, 0x3, 0x1A, 0x3, 0x26, 0x3, 0x26, 0x3, 0x1A, 0x3, 0x1A, 0x3, 0x26, 0x3, 0x26,
    0xFF,
];
#[allow(dead_code)]
pub static TRACK_12: [u8; 17] = [
    0x3, 0x13, 0x3, 0x13, 0x3, 0x1D, 0x3, 0x1F, 0x3, 0x13, 0x3, 0x13, 0x3, 0x1D, 0x3, 0x1F, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_13: [u8; 117] = [
    0x1, 0x3E, 0x1, 0x39, 0x1, 0x35, 0x1, 0x39, 0x1, 0x3E, 0x1, 0x39, 0x1, 0x35, 0x1, 0x39, 0x3,
    0x3E, 0x1, 0x41, 0x1, 0x40, 0x3, 0x40, 0x1, 0x3D, 0x1, 0x3E, 0x1, 0x40, 0x1, 0x3D, 0x1, 0x39,
    0x1, 0x3D, 0x1, 0x40, 0x1, 0x3D, 0x1, 0x39, 0x1, 0x3D, 0x3, 0x40, 0x1, 0x43, 0x1, 0x41, 0x3,
    0x41, 0x1, 0x3E, 0x1, 0x40, 0x1, 0x41, 0x1, 0x3E, 0x1, 0x39, 0x1, 0x3E, 0x1, 0x41, 0x1, 0x3E,
    0x1, 0x39, 0x1, 0x3E, 0x3, 0x41, 0x1, 0x45, 0x1, 0x43, 0x3, 0x43, 0x1, 0x40, 0x1, 0x41, 0x1,
    0x43, 0x1, 0x40, 0x1, 0x3D, 0x1, 0x40, 0x1, 0x43, 0x1, 0x40, 0x1, 0x3D, 0x1, 0x40, 0x1, 0x46,
    0x1, 0x43, 0x1, 0x45, 0x1, 0x46, 0x1, 0x44, 0x1, 0x43, 0x1, 0x40, 0x1, 0x3D, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_14: [u8; 12] = [
    0x3, 0x1F, 0x3, 0x1F, 0x3, 0x24, 0x3, 0x26, 0x7, 0x13, 0x47, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_15: [u8; 255] = [
    0x1, 0x3E, 0x1, 0x39, 0x1, 0x35, 0x1, 0x39, 0x1, 0x3E, 0x1, 0x39, 0x1, 0x35, 0x1, 0x39, 0x1,
    0x3E, 0x1, 0x39, 0x1, 0x35, 0x1, 0x39, 0x1, 0x3E, 0x1, 0x39, 0x1, 0x35, 0x1, 0x39, 0x1, 0x3E,
    0x1, 0x3A, 0x1, 0x37, 0x1, 0x3A, 0x1, 0x3E, 0x1, 0x3A, 0x1, 0x37, 0x1, 0x3A, 0x1, 0x3E, 0x1,
    0x3A, 0x1, 0x37, 0x1, 0x3A, 0x1, 0x3E, 0x1, 0x3A, 0x1, 0x37, 0x1, 0x3A, 0x1, 0x40, 0x1, 0x3D,
    0x1, 0x39, 0x1, 0x3D, 0x1, 0x40, 0x1, 0x3D, 0x1, 0x39, 0x1, 0x3D, 0x1, 0x40, 0x1, 0x3D, 0x1,
    0x39, 0x1, 0x3D, 0x1, 0x40, 0x1, 0x3D, 0x1, 0x39, 0x1, 0x3D, 0x1, 0x41, 0x1, 0x3E, 0x1, 0x39,
    0x1, 0x3E, 0x1, 0x41, 0x1, 0x3E, 0x1, 0x39, 0x1, 0x3E, 0x1, 0x41, 0x1, 0x3E, 0x1, 0x39, 0x1,
    0x3E, 0x1, 0x41, 0x1, 0x3E, 0x1, 0x39, 0x1, 0x3E, 0x1, 0x43, 0x1, 0x3E, 0x1, 0x3A, 0x1, 0x3E,
    0x1, 0x43, 0x1, 0x3E, 0x1, 0x3A, 0x1, 0x3E, 0x1, 0x43, 0x1, 0x3E, 0x1, 0x3A, 0x1, 0x3E, 0x1,
    0x43, 0x1, 0x3E, 0x1, 0x3A, 0x1, 0x3E, 0x1, 0x43, 0x1, 0x3F, 0x1, 0x3C, 0x1, 0x3F, 0x1, 0x43,
    0x1, 0x3F, 0x1, 0x3C, 0x1, 0x3F, 0x1, 0x43, 0x1, 0x3F, 0x1, 0x3C, 0x1, 0x3F, 0x1, 0x43, 0x1,
    0x3F, 0x1, 0x3C, 0x1, 0x3F, 0x1, 0x45, 0x1, 0x42, 0x1, 0x3C, 0x1, 0x42, 0x1, 0x45, 0x1, 0x42,
    0x1, 0x3C, 0x1, 0x42, 0x1, 0x48, 0x1, 0x45, 0x1, 0x42, 0x1, 0x45, 0x1, 0x4B, 0x1, 0x48, 0x1,
    0x45, 0x1, 0x48, 0x1, 0x4B, 0x1, 0x4A, 0x1, 0x48, 0x1, 0x4A, 0x1, 0x4B, 0x1, 0x4A, 0x1, 0x48,
    0x1, 0x4A, 0x1, 0x4B, 0x1, 0x4A, 0x1, 0x48, 0x1, 0x4A, 0x1, 0x4C, 0x1, 0x4E, 0x3, 0x4F, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_16: [u8; 5] = [0x7, 0x1A, 0x4F, 0x47, 0xFF];
#[allow(dead_code)]
pub static TRACK_17: [u8; 18] = [
    0xBF, 0x6, 0x56, 0x1F, 0x57, 0x1F, 0x56, 0x1F, 0x5B, 0x1F, 0x56, 0x1F, 0x57, 0x1F, 0x56, 0x1F,
    0x4F, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_18: [u8; 11] = [
    0xBF, 0xC, 0x68, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_19: [u8; 18] = [
    0xBF, 0x8, 0x13, 0x3F, 0x13, 0x3F, 0x13, 0x3F, 0x13, 0x3F, 0x13, 0x3F, 0x13, 0x3F, 0x13, 0x1F,
    0x13, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_20: [u8; 35] = [
    0x97, 0x9, 0x2E, 0x3, 0x2E, 0x1B, 0x32, 0x3, 0x32, 0x1B, 0x31, 0x3, 0x31, 0x1F, 0x34, 0x43,
    0x17, 0x32, 0x3, 0x32, 0x1B, 0x35, 0x3, 0x35, 0x1B, 0x34, 0x3, 0x34, 0xF, 0x37, 0x8F, 0xA,
    0x37, 0x43, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_21: [u8; 35] = [
    0x97, 0x9, 0x2B, 0x3, 0x2B, 0x1B, 0x2E, 0x3, 0x2E, 0x1B, 0x2D, 0x3, 0x2D, 0x1F, 0x30, 0x43,
    0x17, 0x2E, 0x3, 0x2E, 0x1B, 0x32, 0x3, 0x32, 0x1B, 0x31, 0x3, 0x31, 0xF, 0x34, 0x8F, 0xA,
    0x34, 0x43, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_22: [u8; 33] = [
    0xF, 0x1F, 0xF, 0x1F, 0xF, 0x1F, 0xF, 0x1F, 0xF, 0x1F, 0xF, 0x1F, 0xF, 0x1F, 0xF, 0x1F, 0xF,
    0x1F, 0xF, 0x1F, 0xF, 0x1F, 0xF, 0x1F, 0xF, 0x1F, 0xF, 0x1F, 0xF, 0x1F, 0xF, 0x1F, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_23: [u8; 51] = [
    0x97, 0x9, 0x33, 0x3, 0x33, 0x1B, 0x37, 0x3, 0x37, 0x1B, 0x36, 0x3, 0x36, 0x1F, 0x39, 0x43,
    0x17, 0x37, 0x3, 0x37, 0x1B, 0x3A, 0x3, 0x3A, 0x1B, 0x39, 0x3, 0x39, 0x2F, 0x3C, 0x21, 0x3C,
    0x21, 0x3D, 0x21, 0x3E, 0x21, 0x3F, 0x21, 0x40, 0x21, 0x41, 0x21, 0x42, 0x21, 0x43, 0x21, 0x44,
    0x1, 0x45, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_24: [u8; 51] = [
    0x97, 0x9, 0x30, 0x3, 0x30, 0x1B, 0x33, 0x3, 0x33, 0x1B, 0x32, 0x3, 0x32, 0x1F, 0x36, 0x43,
    0x17, 0x33, 0x3, 0x33, 0x1B, 0x37, 0x3, 0x37, 0x1B, 0x36, 0x3, 0x36, 0x2F, 0x39, 0x21, 0x39,
    0x21, 0x3A, 0x21, 0x3B, 0x21, 0x3C, 0x21, 0x3D, 0x21, 0x3E, 0x21, 0x3F, 0x21, 0x40, 0x21, 0x41,
    0x1, 0x42, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_25: [u8; 33] = [
    0xF, 0x1A, 0xF, 0x1A, 0xF, 0x1A, 0xF, 0x1A, 0xF, 0x1A, 0xF, 0x1A, 0xF, 0x1A, 0xF, 0x1A, 0xF,
    0x1A, 0xF, 0x1A, 0xF, 0x1A, 0xF, 0x1A, 0xF, 0x1A, 0xF, 0x1A, 0xF, 0x1A, 0xF, 0x1A, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_26: [u8; 8] = [0x1F, 0x46, 0xBF, 0xA, 0x46, 0x7F, 0x7F, 0xFF];
#[allow(dead_code)]
pub static TRACK_27: [u8; 7] = [0x1F, 0x43, 0xBF, 0xA, 0x43, 0x7F, 0xFF];
#[allow(dead_code)]
pub static TRACK_28: [u8; 66] = [
    0x83, 0x2, 0x13, 0x3, 0x13, 0x3, 0x1E, 0x3, 0x1F, 0x3, 0x13, 0x3, 0x13, 0x3, 0x1E, 0x3, 0x1F,
    0x3, 0x13, 0x3, 0x13, 0x3, 0x1E, 0x3, 0x1F, 0x3, 0x13, 0x3, 0x13, 0x3, 0x1E, 0x3, 0x1F, 0x3,
    0x13, 0x3, 0x13, 0x3, 0x1E, 0x3, 0x1F, 0x3, 0x13, 0x3, 0x13, 0x3, 0x1E, 0x3, 0x1F, 0x3, 0x13,
    0x3, 0x13, 0x3, 0x1E, 0x3, 0x1F, 0x3, 0x13, 0x3, 0x13, 0x3, 0x1E, 0x3, 0x1F, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_29: [u8; 17] = [
    0x3, 0x15, 0x3, 0x15, 0x3, 0x1F, 0x3, 0x21, 0x3, 0x15, 0x3, 0x15, 0x3, 0x1F, 0x3, 0x21, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_30: [u8; 17] = [
    0x3, 0x1A, 0x3, 0x1A, 0x3, 0x1C, 0x3, 0x1C, 0x3, 0x1D, 0x3, 0x1D, 0x3, 0x1E, 0x3, 0x1E, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_31: [u8; 15] = [
    0x3, 0x1A, 0x3, 0x1A, 0x3, 0x24, 0x3, 0x26, 0x3, 0x13, 0x3, 0x13, 0x7, 0x1F, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_32: [u8; 33] = [
    0x3, 0x19, 0x3, 0x19, 0x3, 0x25, 0x3, 0x25, 0x3, 0x19, 0x3, 0x19, 0x3, 0x25, 0x3, 0x25, 0x3,
    0x21, 0x3, 0x21, 0x3, 0x2D, 0x3, 0x2D, 0x3, 0x21, 0x3, 0x21, 0x3, 0x2D, 0x3, 0x2D, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_33: [u8; 17] = [
    0x3, 0x1C, 0x3, 0x1C, 0x3, 0x28, 0x3, 0x28, 0x3, 0x1C, 0x3, 0x1C, 0x3, 0x28, 0x3, 0x28, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_34: [u8; 17] = [
    0x3, 0x1D, 0x3, 0x1D, 0x3, 0x29, 0x3, 0x29, 0x3, 0x1D, 0x3, 0x1D, 0x3, 0x29, 0x3, 0x29, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_35: [u8; 17] = [
    0x3, 0x18, 0x3, 0x18, 0x3, 0x24, 0x3, 0x24, 0x3, 0x18, 0x3, 0x18, 0x3, 0x24, 0x3, 0x24, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_36: [u8; 17] = [
    0x3, 0x1E, 0x3, 0x1E, 0x3, 0x2A, 0x3, 0x2A, 0x3, 0x1E, 0x3, 0x1E, 0x3, 0x2A, 0x3, 0x2A, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_37: [u8; 38] = [
    0x83, 0x5, 0x26, 0x1, 0x4A, 0x1, 0x34, 0x3, 0x29, 0x3, 0x4C, 0x3, 0x4A, 0x3, 0x31, 0x3, 0x4A,
    0x3, 0x24, 0x3, 0x22, 0x1, 0x46, 0x1, 0x30, 0x3, 0x25, 0x3, 0x48, 0x3, 0x46, 0x3, 0x2D, 0x3,
    0x46, 0x3, 0x24, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_38: [u8; 15] = [
    0x87, 0x2, 0x1A, 0x87, 0x3, 0x2F, 0x83, 0x2, 0x26, 0x3, 0x26, 0x87, 0x3, 0x2F, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_39: [u8; 3] = [0x1F, 0x4A, 0xFF];
#[allow(dead_code)]
pub static TRACK_40: [u8; 13] = [
    0x3, 0x46, 0x1, 0x48, 0x1, 0x46, 0x3, 0x45, 0x3, 0x4A, 0xF, 0x43, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_41: [u8; 5] = [0x8F, 0xB, 0x38, 0x4F, 0xFF];
#[allow(dead_code)]
pub static TRACK_42: [u8; 37] = [
    0x3, 0x34, 0x1, 0x37, 0x1, 0x35, 0x3, 0x34, 0x3, 0x37, 0x3, 0x35, 0x3, 0x34, 0x3, 0x37, 0x1,
    0x35, 0x1, 0x34, 0x3, 0x34, 0x3, 0x3A, 0x3, 0x39, 0x3, 0x3A, 0x3, 0x34, 0x3, 0x3A, 0x3, 0x39,
    0x3, 0x3A, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_43: [u8; 33] = [
    0x3, 0x39, 0x3, 0x38, 0x3, 0x39, 0x3, 0x3A, 0x3, 0x39, 0x3, 0x37, 0x3, 0x35, 0x3, 0x34, 0x3,
    0x35, 0x3, 0x34, 0x3, 0x35, 0x3, 0x37, 0x3, 0x35, 0x3, 0x34, 0x3, 0x32, 0x3, 0x31, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_44: [u8; 23] = [
    0x83, 0xE, 0x32, 0x7, 0x32, 0x7, 0x2F, 0x7, 0x2F, 0x3, 0x2B, 0x87, 0xB, 0x46, 0x83, 0xE, 0x2C,
    0x3, 0x2C, 0x8F, 0xB, 0x32, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_45: [u8; 16] = [
    0x43, 0x83, 0xE, 0x32, 0x3, 0x32, 0x3, 0x2F, 0x3, 0x2F, 0x3, 0x2C, 0x87, 0xB, 0x38, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_46: [u8; 2] = [0x5F, 0xFF];
#[allow(dead_code)]
pub static TRACK_47: [u8; 129] = [
    0x3, 0x1A, 0x3, 0x1A, 0x3, 0x24, 0x3, 0x26, 0x3, 0x1A, 0x3, 0x1A, 0x3, 0x18, 0x3, 0x19, 0x3,
    0x1A, 0x3, 0x1A, 0x3, 0x24, 0x3, 0x26, 0x3, 0x1A, 0x3, 0x1A, 0x3, 0x18, 0x3, 0x19, 0x3, 0x18,
    0x3, 0x18, 0x3, 0x22, 0x3, 0x24, 0x3, 0x18, 0x3, 0x18, 0x3, 0x16, 0x3, 0x17, 0x3, 0x18, 0x3,
    0x18, 0x3, 0x22, 0x3, 0x24, 0x3, 0x18, 0x3, 0x18, 0x3, 0x16, 0x3, 0x17, 0x3, 0x13, 0x3, 0x13,
    0x3, 0x1D, 0x3, 0x1F, 0x3, 0x13, 0x3, 0x13, 0x3, 0x1D, 0x3, 0x1E, 0x3, 0x13, 0x3, 0x13, 0x3,
    0x1D, 0x3, 0x1F, 0x3, 0x13, 0x3, 0x13, 0x3, 0x1D, 0x3, 0x1E, 0x3, 0x1A, 0x3, 0x1A, 0x3, 0x24,
    0x3, 0x26, 0x3, 0x1A, 0x3, 0x1A, 0x3, 0x18, 0x3, 0x19, 0x3, 0x1A, 0x3, 0x1A, 0x3, 0x24, 0x3,
    0x26, 0x3, 0x1A, 0x3, 0x1A, 0x3, 0x18, 0x3, 0x19, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_48: [u8; 36] = [
    0xBF, 0xF, 0x32, 0xF, 0x32, 0x8F, 0x90, 0x30, 0x3F, 0x32, 0x13, 0x32, 0x3, 0x32, 0x3, 0x35,
    0x3, 0x37, 0x3F, 0x37, 0xF, 0x37, 0x8F, 0x90, 0x30, 0x3F, 0x32, 0x13, 0x32, 0x3, 0x2D, 0x3,
    0x30, 0x3, 0x32, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_49: [u8; 47] = [
    0xF, 0x32, 0xAF, 0x90, 0x35, 0xF, 0x37, 0xA7, 0x99, 0x37, 0x7, 0x35, 0x3F, 0x32, 0x13, 0x32,
    0x3, 0x32, 0xA3, 0xE8, 0x35, 0x3, 0x37, 0xF, 0x35, 0xAF, 0x90, 0x37, 0xF, 0x37, 0xA7, 0x99,
    0x37, 0x7, 0x35, 0x3F, 0x32, 0x13, 0x32, 0x3, 0x2D, 0xA3, 0xE8, 0x30, 0x3, 0x32, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_50: [u8; 73] = [
    0x7, 0x32, 0x3, 0x39, 0x13, 0x3C, 0xA7, 0x9A, 0x37, 0xA7, 0x9B, 0x38, 0x7, 0x37, 0x3, 0x35,
    0x3, 0x32, 0x3, 0x39, 0x1B, 0x3C, 0xA7, 0x9A, 0x37, 0xA7, 0x9B, 0x38, 0x7, 0x37, 0x3, 0x35,
    0x3, 0x32, 0x3, 0x39, 0x3, 0x3C, 0x3, 0x3E, 0x3, 0x3C, 0x7, 0x3E, 0x3, 0x3C, 0x3, 0x39, 0xA7,
    0x9A, 0x37, 0xA7, 0x9B, 0x38, 0x7, 0x37, 0x3, 0x35, 0x3, 0x32, 0xAF, 0x90, 0x3C, 0x1F, 0x3E,
    0x43, 0x3, 0x3E, 0x3, 0x3C, 0x3, 0x3E, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_51: [u8; 98] = [
    0x3, 0x3E, 0x3, 0x3E, 0xA3, 0xE8, 0x3C, 0x3, 0x3E, 0x3, 0x3E, 0x3, 0x3E, 0xA3, 0xE8, 0x3C, 0x3,
    0x3E, 0x3, 0x3E, 0x3, 0x3E, 0xA3, 0xE8, 0x3C, 0x3, 0x3E, 0x3, 0x3E, 0x3, 0x3E, 0xA3, 0xE8,
    0x3C, 0x3, 0x3E, 0xAF, 0x91, 0x43, 0x1F, 0x41, 0x43, 0x3, 0x3E, 0x3, 0x41, 0x3, 0x43, 0x3,
    0x43, 0x3, 0x43, 0xA3, 0xE8, 0x41, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0xA3, 0xE8, 0x41, 0x3,
    0x43, 0x3, 0x45, 0x3, 0x48, 0xA3, 0xFD, 0x45, 0x3, 0x44, 0x1, 0x43, 0x1, 0x41, 0x3, 0x3E, 0x3,
    0x3C, 0x3, 0x3E, 0x2F, 0x3E, 0xBF, 0x98, 0x3E, 0x43, 0x3, 0x3E, 0x3, 0x3C, 0x3, 0x3E, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_52: [u8; 19] = [
    0x3, 0x4A, 0x3, 0x4A, 0xA3, 0xF8, 0x48, 0x3, 0x4A, 0x3, 0x4A, 0x3, 0x4A, 0xA3, 0xF8, 0x48, 0x3,
    0x4A, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_53: [u8; 33] = [
    0x1, 0x51, 0x1, 0x54, 0x1, 0x51, 0x1, 0x54, 0x1, 0x51, 0x1, 0x54, 0x1, 0x51, 0x1, 0x54, 0x1,
    0x51, 0x1, 0x54, 0x1, 0x51, 0x1, 0x54, 0x1, 0x51, 0x1, 0x54, 0x1, 0x51, 0x1, 0x54, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_54: [u8; 65] = [
    0x1, 0x50, 0x1, 0x4F, 0x1, 0x4D, 0x1, 0x4A, 0x1, 0x4F, 0x1, 0x4D, 0x1, 0x4A, 0x1, 0x48, 0x1,
    0x4A, 0x1, 0x48, 0x1, 0x45, 0x1, 0x43, 0x1, 0x44, 0x1, 0x43, 0x1, 0x41, 0x1, 0x3E, 0x1, 0x43,
    0x1, 0x41, 0x1, 0x3E, 0x1, 0x3C, 0x1, 0x3E, 0x1, 0x3C, 0x1, 0x39, 0x1, 0x37, 0x1, 0x38, 0x1,
    0x37, 0x1, 0x35, 0x1, 0x32, 0x1, 0x37, 0x1, 0x35, 0x1, 0x32, 0x1, 0x30, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_55: [u8; 66] = [
    0x5F, 0x5F, 0x5F, 0x47, 0x83, 0xE, 0x32, 0x7, 0x32, 0x7, 0x2F, 0x3, 0x2F, 0x7, 0x2F, 0x97, 0xB,
    0x3A, 0x5F, 0x5F, 0x47, 0x8B, 0xE, 0x32, 0x3, 0x32, 0x3, 0x2F, 0x3, 0x2F, 0x47, 0x97, 0xB,
    0x3A, 0x5F, 0x5F, 0x47, 0x83, 0xE, 0x2F, 0xB, 0x2F, 0x3, 0x2F, 0x3, 0x2F, 0x87, 0xB, 0x30,
    0x17, 0x3A, 0x5F, 0x8B, 0xE, 0x32, 0xB, 0x32, 0xB, 0x2F, 0xB, 0x2F, 0x7, 0x2C, 0x7, 0x2C, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_56: [u8; 40] = [
    0x87, 0xB, 0x34, 0x17, 0x3A, 0x5F, 0x5F, 0x84, 0xE, 0x32, 0x4, 0x32, 0x5, 0x32, 0x4, 0x2F, 0x4,
    0x2F, 0x5, 0x2F, 0x47, 0x97, 0xB, 0x3A, 0x5F, 0x5F, 0x84, 0xE, 0x32, 0x4, 0x32, 0x5, 0x32, 0x4,
    0x2F, 0x4, 0x2F, 0x5, 0x2F, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_57: [u8; 81] = [
    0x83, 0x1, 0x43, 0x1, 0x4F, 0x1, 0x5B, 0x87, 0x3, 0x2F, 0x83, 0x1, 0x43, 0x1, 0x4F, 0x1, 0x5B,
    0x87, 0x3, 0x2F, 0x83, 0x1, 0x43, 0x1, 0x4F, 0x1, 0x5B, 0x87, 0x3, 0x2F, 0x83, 0x1, 0x43, 0x1,
    0x4F, 0x1, 0x5B, 0x87, 0x3, 0x2F, 0x83, 0x1, 0x43, 0x1, 0x4F, 0x1, 0x5B, 0x87, 0x3, 0x2F, 0x83,
    0x1, 0x43, 0x1, 0x4F, 0x1, 0x5B, 0x87, 0x3, 0x2F, 0x83, 0x1, 0x43, 0x1, 0x4F, 0x1, 0x5B, 0x87,
    0x3, 0x2F, 0x83, 0x1, 0x43, 0x1, 0x4F, 0x1, 0x5B, 0x87, 0x3, 0x2F, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_58: [u8; 14] = [
    0x3, 0x3E, 0x7, 0x3E, 0x7, 0x3F, 0x7, 0x3E, 0x3, 0x3C, 0x7, 0x3E, 0x57, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_59: [u8; 15] = [
    0x83, 0x4, 0x36, 0x7, 0x36, 0x7, 0x37, 0x7, 0x36, 0x3, 0x33, 0x7, 0x32, 0x57, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_60: [u8; 34] = [
    0x80, 0x10, 0x46, 0x0, 0x43, 0x0, 0x45, 0x0, 0x42, 0x0, 0x46, 0x0, 0x43, 0x0, 0x45, 0x0, 0x42,
    0x0, 0x46, 0x0, 0x43, 0x0, 0x45, 0x0, 0x42, 0x0, 0x46, 0x0, 0x43, 0x0, 0x45, 0x0, 0x42, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_61: [u8; 34] = [
    0x80, 0x10, 0x43, 0x0, 0x3F, 0x0, 0x42, 0x0, 0x3E, 0x0, 0x43, 0x0, 0x3F, 0x0, 0x42, 0x0, 0x3E,
    0x0, 0x43, 0x0, 0x3F, 0x0, 0x42, 0x0, 0x3E, 0x0, 0x43, 0x0, 0x3F, 0x0, 0x42, 0x0, 0x3E, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_62: [u8; 64] = [
    0x21, 0x46, 0x21, 0x43, 0x21, 0x45, 0x21, 0x42, 0x22, 0x46, 0x22, 0x43, 0x22, 0x45, 0x22, 0x42,
    0x23, 0x46, 0x23, 0x43, 0x23, 0x45, 0x23, 0x42, 0x24, 0x46, 0x24, 0x43, 0x24, 0x45, 0x24, 0x42,
    0x25, 0x46, 0x25, 0x43, 0x25, 0x45, 0x25, 0x42, 0x28, 0x46, 0x28, 0x43, 0x28, 0x45, 0x28, 0x42,
    0x9, 0x43, 0xB, 0x3F, 0xE, 0x42, 0x12, 0x3C, 0x2F, 0x3A, 0xAF, 0xD0, 0x3A, 0x1F, 0x46, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_63: [u8; 64] = [
    0x21, 0x43, 0x21, 0x3F, 0x21, 0x42, 0x21, 0x3E, 0x22, 0x43, 0x22, 0x3F, 0x22, 0x42, 0x22, 0x3E,
    0x23, 0x43, 0x23, 0x3F, 0x23, 0x42, 0x23, 0x3E, 0x24, 0x43, 0x24, 0x3F, 0x24, 0x42, 0x24, 0x3E,
    0x25, 0x43, 0x25, 0x3F, 0x25, 0x42, 0x25, 0x3E, 0x28, 0x43, 0x28, 0x3F, 0x28, 0x42, 0x28, 0x3E,
    0x9, 0x3F, 0xB, 0x3C, 0xE, 0x3E, 0x12, 0x39, 0x2F, 0x32, 0xAF, 0xD0, 0x32, 0x1F, 0x3E, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_64: [u8; 30] = [
    0x7, 0x26, 0xB, 0x1A, 0xF, 0x26, 0x13, 0x1A, 0x17, 0x26, 0x11, 0x1A, 0x11, 0x26, 0x9, 0x1A,
    0xB, 0x26, 0xE, 0x1A, 0x12, 0x26, 0x2F, 0x2B, 0xAF, 0xC1, 0x2B, 0x1F, 0x1F, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_65: [u8; 18] = [
    0x87, 0x11, 0x3F, 0x7, 0x44, 0x7, 0x46, 0x7, 0x44, 0x7, 0x4B, 0x7, 0x44, 0x7, 0x46, 0x7, 0x44,
    0xFF,
];
#[allow(dead_code)]
pub static TRACK_66: [u8; 20] = [
    0x8F, 0x2, 0x20, 0x87, 0x3, 0x2F, 0x87, 0x2, 0x20, 0x7, 0x20, 0x7, 0x20, 0x87, 0x3, 0x2F, 0x87,
    0x2, 0x1B, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_67: [u8; 20] = [
    0x8F, 0x2, 0x1D, 0x87, 0x3, 0x2F, 0x87, 0x2, 0x1D, 0x7, 0x1D, 0x7, 0x1D, 0x87, 0x3, 0x2F, 0x87,
    0x2, 0x18, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_68: [u8; 20] = [
    0x8F, 0x2, 0x19, 0x87, 0x3, 0x2F, 0x87, 0x2, 0x19, 0x7, 0x19, 0x7, 0x19, 0x87, 0x3, 0x2F, 0x87,
    0x2, 0x20, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_69: [u8; 20] = [
    0x8F, 0x2, 0x1B, 0x87, 0x3, 0x2F, 0x87, 0x2, 0x1B, 0x7, 0x1B, 0x7, 0x1B, 0x87, 0x3, 0x2F, 0x87,
    0x2, 0x22, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_70: [u8; 32] = [
    0xBF, 0x9, 0x3C, 0x3F, 0x3C, 0xF, 0x3C, 0x3, 0x3D, 0x3, 0x3C, 0x3, 0x3D, 0x3, 0x3C, 0x7, 0x3D,
    0x7, 0x3F, 0x7, 0x3D, 0x7, 0x3C, 0x7, 0x3D, 0xF, 0x3C, 0x37, 0x38, 0x1F, 0x38, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_71: [u8; 25] = [
    0x3, 0x3D, 0x3, 0x3C, 0x3, 0x3D, 0x3, 0x3C, 0x7, 0x3D, 0x7, 0x3F, 0x7, 0x3D, 0x7, 0x3C, 0x7,
    0x3D, 0xF, 0x3C, 0x37, 0x38, 0x1F, 0x38, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_72: [u8; 19] = [
    0x7, 0x35, 0x17, 0x3D, 0xF, 0x3C, 0x7, 0x3C, 0xF, 0x3A, 0x27, 0x3A, 0x3F, 0x3A, 0x3F, 0x3A,
    0x1F, 0x3A, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_73: [u8; 20] = [
    0x47, 0x8F, 0x12, 0x3C, 0x17, 0x3F, 0x7, 0x3D, 0x7, 0x3C, 0x47, 0xF, 0x3C, 0x17, 0x3C, 0x7,
    0x3A, 0x7, 0x38, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_74: [u8; 18] = [
    0x87, 0x13, 0x44, 0x7, 0x48, 0x7, 0x49, 0x7, 0x48, 0x7, 0x44, 0x7, 0x49, 0x7, 0x48, 0x7, 0x49,
    0xFF,
];
#[allow(dead_code)]
pub static TRACK_75: [u8; 16] = [
    0xA3, 0x9, 0x44, 0xA3, 0xE8, 0x44, 0x22, 0x46, 0xA4, 0xD9, 0x46, 0x1F, 0x44, 0xF, 0x3F, 0xFF,
];
#[allow(dead_code)]
pub static TRACK_76: [u8; 29] = [
    0x23, 0x4B, 0xA3, 0xFE, 0x4B, 0x23, 0x4D, 0xA3, 0xF1, 0x4D, 0x1F, 0x4B, 0xF, 0x49, 0x23, 0x46,
    0xA3, 0xFE, 0x46, 0x23, 0x48, 0xA3, 0xEB, 0x48, 0x1F, 0x46, 0xF, 0x46, 0xFF,
];

#[allow(dead_code)]
pub static INSTRUMENTS: [Instrument; 20] = [
    Instrument {
        pulse_width: 2944,
        ctrl_register: 0b01000001,
        attack_and_decay: 0x48,
        sustain_and_release: 0x60,
        vibrato_depth: 3,
        pulse_speed: 0x81,
        fx: 0b00000000,
    },
    Instrument {
        pulse_width: 2048,
        ctrl_register: 0b10000001,
        attack_and_decay: 0x02,
        sustain_and_release: 0x08,
        vibrato_depth: 0,
        pulse_speed: 0x00,
        fx: 0b00000001,
    },
    Instrument {
        pulse_width: 672,
        ctrl_register: 0b01000001,
        attack_and_decay: 0x09,
        sustain_and_release: 0x80,
        vibrato_depth: 0,
        pulse_speed: 0x00,
        fx: 0b00000000,
    },
    Instrument {
        pulse_width: 512,
        ctrl_register: 0b10000001,
        attack_and_decay: 0x09,
        sustain_and_release: 0x09,
        vibrato_depth: 0,
        pulse_speed: 0x00,
        fx: 0b00000101,
    },
    Instrument {
        pulse_width: 2048,
        ctrl_register: 0b01000001,
        attack_and_decay: 0x08,
        sustain_and_release: 0x50,
        vibrato_depth: 2,
        pulse_speed: 0x00,
        fx: 0b00000100,
    },
    Instrument {
        pulse_width: 256,
        ctrl_register: 0b01000001,
        attack_and_decay: 0x3F,
        sustain_and_release: 0xC0,
        vibrato_depth: 2,
        pulse_speed: 0x00,
        fx: 0b00000000,
    },
    Instrument {
        pulse_width: 2048,
        ctrl_register: 0b01000001,
        attack_and_decay: 0x04,
        sustain_and_release: 0x40,
        vibrato_depth: 2,
        pulse_speed: 0x00,
        fx: 0b00000000,
    },
    Instrument {
        pulse_width: 2048,
        ctrl_register: 0b01000001,
        attack_and_decay: 0x09,
        sustain_and_release: 0x00,
        vibrato_depth: 2,
        pulse_speed: 0x00,
        fx: 0b00000000,
    },
    Instrument {
        pulse_width: 2688,
        ctrl_register: 0b01000001,
        attack_and_decay: 0x09,
        sustain_and_release: 0x70,
        vibrato_depth: 2,
        pulse_speed: 0x5F,
        fx: 0b00000100,
    },
    Instrument {
        pulse_width: 2176,
        ctrl_register: 0b01000001,
        attack_and_decay: 0x4A,
        sustain_and_release: 0x69,
        vibrato_depth: 2,
        pulse_speed: 0x81,
        fx: 0b00000000,
    },
    Instrument {
        pulse_width: 2304,
        ctrl_register: 0b01000001,
        attack_and_decay: 0x40,
        sustain_and_release: 0x6F,
        vibrato_depth: 0,
        pulse_speed: 0x81,
        fx: 0b00000010,
    },
    Instrument {
        pulse_width: 1920,
        ctrl_register: 0b10000001,
        attack_and_decay: 0x0A,
        sustain_and_release: 0x0A,
        vibrato_depth: 0,
        pulse_speed: 0x00,
        fx: 0b00000001,
    },
    Instrument {
        pulse_width: 2976,
        ctrl_register: 0b01000001,
        attack_and_decay: 0x3F,
        sustain_and_release: 0xFF,
        vibrato_depth: 1,
        pulse_speed: 0xE7,
        fx: 0b00000010,
    },
    Instrument {
        pulse_width: 2048,
        ctrl_register: 0b01000001,
        attack_and_decay: 0x90,
        sustain_and_release: 0xF0,
        vibrato_depth: 1,
        pulse_speed: 0xE8,
        fx: 0b00000010,
    },
    Instrument {
        pulse_width: 2048,
        ctrl_register: 0b01000001,
        attack_and_decay: 0x06,
        sustain_and_release: 0x0A,
        vibrato_depth: 0,
        pulse_speed: 0x00,
        fx: 0b00000001,
    },
    Instrument {
        pulse_width: 2304,
        ctrl_register: 0b01000001,
        attack_and_decay: 0x19,
        sustain_and_release: 0x70,
        vibrato_depth: 2,
        pulse_speed: 0xA8,
        fx: 0b00000000,
    },
    Instrument {
        pulse_width: 512,
        ctrl_register: 0b01000001,
        attack_and_decay: 0x09,
        sustain_and_release: 0x90,
        vibrato_depth: 2,
        pulse_speed: 0x00,
        fx: 0b00000000,
    },
    Instrument {
        pulse_width: 0,
        ctrl_register: 0b00010001,
        attack_and_decay: 0x0A,
        sustain_and_release: 0xFA,
        vibrato_depth: 0,
        pulse_speed: 0x00,
        fx: 0b00000101,
    },
    Instrument {
        pulse_width: 2048,
        ctrl_register: 0b01000001,
        attack_and_decay: 0x37,
        sustain_and_release: 0x40,
        vibrato_depth: 2,
        pulse_speed: 0x00,
        fx: 0b00000000,
    },
    Instrument {
        pulse_width: 2048,
        ctrl_register: 0b00010001,
        attack_and_decay: 0x07,
        sustain_and_release: 0x70,
        vibrato_depth: 2,
        pulse_speed: 0x00,
        fx: 0b00000000,
    },
];

#[allow(dead_code)]
pub static SOUNDFX: [SoundFx; 16] = [
    SoundFx {
        incdec: 0b01100000,
        voice0: SidT {
            freq: 0x9833, // REAL: lower part is used as start note.
            pulse_width: 384,
            ctrl: 0b01000001,
            attack_and_decay_len: 0x0F,
            sustain_vol_and_release_len: 0x00,
        },
        voice1: SidT {
            freq: 0x5700, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 1536,
            ctrl: 0b00010101,
            attack_and_decay_len: 0x0F,
            sustain_vol_and_release_len: 0x00,
        },
        sfx_note_dest: 0x5F, // REAL: end note
    },
    SoundFx {
        incdec: 0b01100010,
        voice0: SidT {
            freq: 0x0340, // REAL: lower part is used as start note.
            pulse_width: 576,
            ctrl: 0b01000001,
            attack_and_decay_len: 0x0C,
            sustain_vol_and_release_len: 0x00,
        },
        voice1: SidT {
            freq: 0x9032, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 2048,
            ctrl: 0b01000011,
            attack_and_decay_len: 0x0A,
            sustain_vol_and_release_len: 0x00,
        },
        sfx_note_dest: 0x58, // REAL: end note
    },
    SoundFx {
        incdec: 0b01010000,
        voice0: SidT {
            freq: 0x0840, // REAL: lower part is used as start note.
            pulse_width: 2176,
            ctrl: 0b01000001,
            attack_and_decay_len: 0x0A,
            sustain_vol_and_release_len: 0x90,
        },
        voice1: SidT {
            freq: 0x1406, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 532,
            ctrl: 0b01000111,
            attack_and_decay_len: 0x0F,
            sustain_vol_and_release_len: 0xA0,
        },
        sfx_note_dest: 0x20, // REAL: end note
    },
    SoundFx {
        incdec: 0b01100010,
        voice0: SidT {
            freq: 0x0810, // REAL: lower part is used as start note.
            pulse_width: 32,
            ctrl: 0b10000001,
            attack_and_decay_len: 0x0E,
            sustain_vol_and_release_len: 0x00,
        },
        voice1: SidT {
            freq: 0x0108, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 2176,
            ctrl: 0b10000001,
            attack_and_decay_len: 0x0F,
            sustain_vol_and_release_len: 0x00,
        },
        sfx_note_dest: 0x4F, // REAL: end note
    },
    SoundFx {
        incdec: 0b00100001,
        voice0: SidT {
            freq: 0x0828, // REAL: lower part is used as start note.
            pulse_width: 2112,
            ctrl: 0b00010001,
            attack_and_decay_len: 0x0F,
            sustain_vol_and_release_len: 0x90,
        },
        voice1: SidT {
            freq: 0x6002, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 1664,
            ctrl: 0b00010101,
            attack_and_decay_len: 0x0F,
            sustain_vol_and_release_len: 0x90,
        },
        sfx_note_dest: 0x4F, // REAL: end note
    },
    SoundFx {
        incdec: 0b00010001,
        voice0: SidT {
            freq: 0x084F, // REAL: lower part is used as start note.
            pulse_width: 2112,
            ctrl: 0b00010001,
            attack_and_decay_len: 0x0F,
            sustain_vol_and_release_len: 0x90,
        },
        voice1: SidT {
            freq: 0x6002, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 1664,
            ctrl: 0b00010101,
            attack_and_decay_len: 0x0F,
            sustain_vol_and_release_len: 0x90,
        },
        sfx_note_dest: 0x28, // REAL: end note
    },
    SoundFx {
        incdec: 0b01100100,
        voice0: SidT {
            freq: 0x0404, // REAL: lower part is used as start note.
            pulse_width: 2176,
            ctrl: 0b01000001,
            attack_and_decay_len: 0x0A,
            sustain_vol_and_release_len: 0xA0,
        },
        voice1: SidT {
            freq: 0x0002, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 276,
            ctrl: 0b01000111,
            attack_and_decay_len: 0x0F,
            sustain_vol_and_release_len: 0x80,
        },
        sfx_note_dest: 0x5F, // REAL: end note
    },
    SoundFx {
        incdec: 0b10100000,
        voice0: SidT {
            freq: 0xC830, // REAL: lower part is used as start note.
            pulse_width: 2048,
            ctrl: 0b01000001,
            attack_and_decay_len: 0x09,
            sustain_vol_and_release_len: 0x00,
        },
        voice1: SidT {
            freq: 0x7902, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 2048,
            ctrl: 0b01000001,
            attack_and_decay_len: 0x0A,
            sustain_vol_and_release_len: 0x00,
        },
        sfx_note_dest: 0x50, // REAL: end note
    },
    SoundFx {
        incdec: 0b10000000,
        voice0: SidT {
            freq: 0x3850, // REAL: lower part is used as start note.
            pulse_width: 2112,
            ctrl: 0b01000001,
            attack_and_decay_len: 0x09,
            sustain_vol_and_release_len: 0x00,
        },
        voice1: SidT {
            freq: 0x2100, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 2176,
            ctrl: 0b00010101,
            attack_and_decay_len: 0x0B,
            sustain_vol_and_release_len: 0x00,
        },
        sfx_note_dest: 0x30, // REAL: end note
    },
    SoundFx {
        incdec: 0b01010000,
        voice0: SidT {
            freq: 0x146F, // REAL: lower part is used as start note.
            pulse_width: 64,
            ctrl: 0b10000001,
            attack_and_decay_len: 0x0A,
            sustain_vol_and_release_len: 0x00,
        },
        voice1: SidT {
            freq: 0x2714, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 2048,
            ctrl: 0b00010101,
            attack_and_decay_len: 0x0D,
            sustain_vol_and_release_len: 0x00,
        },
        sfx_note_dest: 0x30, // REAL: end note
    },
    SoundFx {
        incdec: 0b01010000,
        voice0: SidT {
            freq: 0x0545, // REAL: lower part is used as start note.
            pulse_width: 64,
            ctrl: 0b10000001,
            attack_and_decay_len: 0x02,
            sustain_vol_and_release_len: 0x00,
        },
        voice1: SidT {
            freq: 0xC080, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 2048,
            ctrl: 0b00010101,
            attack_and_decay_len: 0x4F,
            sustain_vol_and_release_len: 0xF0,
        },
        sfx_note_dest: 0x18, // REAL: end note
    },
    SoundFx {
        incdec: 0b01100000,
        voice0: SidT {
            freq: 0x0710, // REAL: lower part is used as start note.
            pulse_width: 128,
            ctrl: 0b10000001,
            attack_and_decay_len: 0x0A,
            sustain_vol_and_release_len: 0x00,
        },
        voice1: SidT {
            freq: 0x0125, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 512,
            ctrl: 0b00010111,
            attack_and_decay_len: 0x0C,
            sustain_vol_and_release_len: 0x00,
        },
        sfx_note_dest: 0x24, // REAL: end note
    },
    SoundFx {
        incdec: 0b00010010,
        voice0: SidT {
            freq: 0x0230, // REAL: lower part is used as start note.
            pulse_width: 128,
            ctrl: 0b00010001,
            attack_and_decay_len: 0x0F,
            sustain_vol_and_release_len: 0xF0,
        },
        voice1: SidT {
            freq: 0x0108, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 512,
            ctrl: 0b00010001,
            attack_and_decay_len: 0x0F,
            sustain_vol_and_release_len: 0xF0,
        },
        sfx_note_dest: 0x14, // REAL: end note
    },
    SoundFx {
        incdec: 0b00010000,
        voice0: SidT {
            freq: 0x021A, // REAL: lower part is used as start note.
            pulse_width: 32,
            ctrl: 0b10000001,
            attack_and_decay_len: 0x0F,
            sustain_vol_and_release_len: 0xF0,
        },
        voice1: SidT {
            freq: 0x0121, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 768,
            ctrl: 0b10000101,
            attack_and_decay_len: 0x0F,
            sustain_vol_and_release_len: 0xF0,
        },
        sfx_note_dest: 0x07, // REAL: end note
    },
    SoundFx {
        incdec: 0b10100000,
        voice0: SidT {
            freq: 0x1A33, // REAL: lower part is used as start note.
            pulse_width: 128,
            ctrl: 0b10000001,
            attack_and_decay_len: 0x0A,
            sustain_vol_and_release_len: 0x00,
        },
        voice1: SidT {
            freq: 0x0D00, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 512,
            ctrl: 0b10000001,
            attack_and_decay_len: 0x0B,
            sustain_vol_and_release_len: 0x00,
        },
        sfx_note_dest: 0x5F, // REAL: end note
    },
    SoundFx {
        incdec: 0b00100000,
        voice0: SidT {
            freq: 0x030A, // REAL: lower part is used as start note.
            pulse_width: 128,
            ctrl: 0b01000001,
            attack_and_decay_len: 0x0A,
            sustain_vol_and_release_len: 0x00,
        },
        voice1: SidT {
            freq: 0x7104, // REAL: value & 0b0011_1111 = note_delta ; sometime if value&0b1_0000000: flip_flop voice0 ctrl ; if value&0b0_1_000000: flip_flop voice1 ctrl
            pulse_width: 160,
            ctrl: 0b01010001,
            attack_and_decay_len: 0x0B,
            sustain_vol_and_release_len: 0xF0,
        },
        sfx_note_dest: 0x20, // REAL: end note
    },
];

#[allow(dead_code)]
pub static INSTRFX: [InstrFx; 0] = [];
